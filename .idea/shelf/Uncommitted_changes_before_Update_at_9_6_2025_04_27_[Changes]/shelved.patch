Index: src/main/java/ucr/proyectoalgoritmos/Domain/flight/FlightSimulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ucr.proyectoalgoritmos.Domain.flight;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport ucr.proyectoalgoritmos.Domain.aeropuetos.Airport;\r\nimport ucr.proyectoalgoritmos.Domain.aeropuetos.AirportManager;\r\nimport ucr.proyectoalgoritmos.Domain.airplane.Airplane;\r\nimport ucr.proyectoalgoritmos.Domain.list.ListException;\r\nimport ucr.proyectoalgoritmos.Domain.list.DoublyLinkedList;\r\nimport ucr.proyectoalgoritmos.Domain.passanger.Passenger;\r\nimport ucr.proyectoalgoritmos.Domain.passanger.PassengerManager;\r\nimport ucr.proyectoalgoritmos.Domain.stack.StackException;\r\nimport ucr.proyectoalgoritmos.route.RouteManager;\r\n\r\nimport java.io.IOException;\r\nimport java.io.Reader;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class FlightSimulator {\r\n    private AirportManager airportManager;\r\n    private PassengerManager passengerManager;\r\n    private FlightScheduleManager flightScheduleManager;\r\n    private RouteManager routeManager;\r\n\r\n    private Map<String, Airplane> airplanes;\r\n    private ScheduledExecutorService scheduler;\r\n    private Random random;\r\n\r\n    public FlightSimulator() throws ListException {\r\n        this.airportManager = new AirportManager();\r\n        this.routeManager = new RouteManager();\r\n        this.passengerManager = new PassengerManager();\r\n        this.flightScheduleManager = new FlightScheduleManager(this.airportManager, this.routeManager);\r\n\r\n        this.airplanes = new HashMap<>();\r\n        this.scheduler = Executors.newScheduledThreadPool(2);\r\n        this.random = new Random();\r\n\r\n        // 1. System Initialization\r\n        initializeSystem();\r\n    }\r\n\r\n    private void initializeSystem() throws ListException {\r\n        System.out.println(\"--- System Initialization ---\");\r\n\r\n        // 1.1 Load Airports\r\n        // This method will now handle both file loading and fallback to defaults if the file is missing/malformed.\r\n        loadAirportsFromFile(\"airports.json\");\r\n\r\n        // NEW STEP: Add all loaded airports as vertices to the graph\r\n        System.out.println(\"[INIT] Adding airports as graph vertices...\");\r\n        try {\r\n            DoublyLinkedList allLoadedAirports = airportManager.getAllAirports();\r\n            if (allLoadedAirports != null && !allLoadedAirports.isEmpty()) {\r\n                for (int i = 0; i < allLoadedAirports.size(); i++) {\r\n                    Airport airport = (Airport) allLoadedAirports.get(i);\r\n                    routeManager.getGraph().addVertex(airport.getCode()); // Add each airport's code as a vertex\r\n                }\r\n                System.out.println(\"[INIT] All \" + routeManager.getGraph().getNumVertices() + \" airports added as graph vertices.\");\r\n            } else {\r\n                System.out.println(\"[WARN] No airports found in AirportManager to add as graph vertices.\");\r\n            }\r\n        } catch (ListException e) {\r\n            System.err.println(\"[ERROR] Failed to add airports as graph vertices: \" + e.getMessage());\r\n        }\r\n\r\n\r\n        // 1.2 Generate Random Routes (after airports are loaded AND added as graph vertices)\r\n        // Ensure there are enough airports in the *graph* to generate routes\r\n        if (routeManager.getGraph().getNumVertices() < 2) { // Check graph's vertex count\r\n            System.err.println(\"[ERROR] Not enough airports (vertices) in the graph to generate routes. Please ensure at least 2 airports are loaded.\");\r\n        } else {\r\n            System.out.println(\"[INIT] Generating random routes between airports...\");\r\n            // Adjust min/max routes and weights as desired\r\n            routeManager.getGraph().generateRandomRoutes(3, 7, 100, 3000); // Between 3 and 7 routes per airport, 100-3000 weight\r\n            System.out.println(\"[INIT] Random routes generated.\");\r\n        }\r\n\r\n\r\n        // Add some initial airplanes\r\n        addAirplane(\"AIR001\", 200, \"SJO\");\r\n        addAirplane(\"AIR002\", 150, \"MIA\");\r\n        addAirplane(\"AIR003\", 250, \"LIR\");\r\n        addAirplane(\"AIR004\", 100, \"LAX\");\r\n        addAirplane(\"AIR005\", 300, \"JFK\");\r\n        System.out.println(\"[INIT] Initial airplanes added.\");\r\n\r\n        // Add some initial passengers\r\n        passengerManager.registerPassenger(\"1001\", \"Alice Smith\", \"USA\");\r\n        passengerManager.registerPassenger(\"1002\", \"Bob Johnson\", \"Canada\");\r\n        passengerManager.registerPassenger(\"1003\", \"Carlos Garcia\", \"Mexico\");\r\n        passengerManager.registerPassenger(\"1004\", \"Diana Miller\", \"UK\");\r\n        passengerManager.registerPassenger(\"1005\", \"Eve Brown\", \"Germany\");\r\n        System.out.println(\"[INIT] Initial passengers registered.\");\r\n\r\n        System.out.println(\"--- System Initialization Complete ---\");\r\n    }\r\n\r\n    // Helper to load airports from a CSV file\r\n    private void loadAirportsFromFile(String filename) {\r\n        System.out.println(\"[INIT] Attempting to load airports from \" + filename + \"...\");\r\n        int loadedCount = 0;\r\n        try (Reader reader = Files.newBufferedReader(Paths.get(filename))) {\r\n            Gson gson = new Gson();\r\n            // Use TypeToken to correctly deserialize a List of Airport objects\r\n            List<Airport> airportListFromFile = gson.fromJson(reader, new TypeToken<List<Airport>>(){}.getType());\r\n\r\n            if (airportListFromFile != null) {\r\n                for (Airport airport : airportListFromFile) {\r\n                    if (loadedCount >= 20) {\r\n                        System.out.println(\"[INIT] Reached max 20 airports from file. Stopping.\");\r\n                        break;\r\n                    }\r\n                    try {\r\n                        airportManager.createAirport(airport.getCode(), airport.getName(), airport.getCountry());\r\n                        loadedCount++;\r\n                    } catch (ListException e) {\r\n                        System.err.println(\"[ERROR] Failed to create airport '\" + airport.getCode() + \"' from file: \" + e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (loadedCount < 15) {\r\n                System.out.println(\"[WARN] Only \" + loadedCount + \" airports loaded from file. Minimum 15 suggested.\");\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            System.err.println(\"[ERROR] Could not read airports file '\" + filename + \"': \" + e.getMessage());\r\n            System.out.println(\"[INFO] Generating some default airports instead.\");\r\n            // Fallback: create some default airports if file fails\r\n            addDefaultAirports();\r\n        } finally {\r\n            try {\r\n                if (airportManager.getAllAirports().isEmpty()) {\r\n                    System.out.println(\"[INFO] No airports loaded/created, adding emergency default airports.\");\r\n                    addDefaultAirports();\r\n                }\r\n                System.out.println(\"[INIT] Total airports loaded/created: \" + airportManager.getAllAirports().size() + \".\");\r\n            } catch (ListException e) {\r\n                System.err.println(\"[ERROR] Problem getting final airport count: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    // New helper method to add default airports\r\n    private void addDefaultAirports() {\r\n        try {\r\n            // Only add if they don't already exist or if airport list is empty\r\n            if (airportManager.findAirport(\"SJO\") == null)\r\n                airportManager.createAirport(\"SJO\", \"Juan Santamaría\", \"Costa Rica\");\r\n            if (airportManager.findAirport(\"LIR\") == null)\r\n                airportManager.createAirport(\"LIR\", \"Daniel Oduber Quirós\", \"Costa Rica\");\r\n            if (airportManager.findAirport(\"MIA\") == null)\r\n                airportManager.createAirport(\"MIA\", \"Miami International\", \"USA\");\r\n            if (airportManager.findAirport(\"JFK\") == null)\r\n                airportManager.createAirport(\"JFK\", \"John F. Kennedy\", \"USA\");\r\n            if (airportManager.findAirport(\"LAX\") == null)\r\n                airportManager.createAirport(\"LAX\", \"Los Angeles International\", \"USA\");\r\n            if (airportManager.findAirport(\"CDG\") == null)\r\n                airportManager.createAirport(\"CDG\", \"Charles de Gaulle\", \"France\");\r\n            if (airportManager.findAirport(\"FRA\") == null)\r\n                airportManager.createAirport(\"FRA\", \"Frankfurt Airport\", \"Germany\");\r\n            if (airportManager.findAirport(\"DXB\") == null)\r\n                airportManager.createAirport(\"DXB\", \"Dubai International\", \"UAE\");\r\n            if (airportManager.findAirport(\"NRT\") == null)\r\n                airportManager.createAirport(\"NRT\", \"Narita International\", \"Japan\");\r\n            if (airportManager.findAirport(\"SYD\") == null)\r\n                airportManager.createAirport(\"SYD\", \"Sydney Airport\", \"Australia\");\r\n            if (airportManager.findAirport(\"ORD\") == null)\r\n                airportManager.createAirport(\"ORD\", \"O'Hare International\", \"USA\");\r\n            if (airportManager.findAirport(\"PEK\") == null)\r\n                airportManager.createAirport(\"PEK\", \"Beijing Capital\", \"China\");\r\n            if (airportManager.findAirport(\"IST\") == null)\r\n                airportManager.createAirport(\"IST\", \"Istanbul Airport\", \"Turkey\");\r\n            if (airportManager.findAirport(\"MEX\") == null)\r\n                airportManager.createAirport(\"MEX\", \"Mexico City Int'l\", \"Mexico\");\r\n            if (airportManager.findAirport(\"LIM\") == null)\r\n                airportManager.createAirport(\"LIM\", \"Jorge Chávez Int'l\", \"Peru\");\r\n        } catch (ListException ex) {\r\n            System.err.println(\"[ERROR] Failed to create default airports: \" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public void addAirplane(String id, int capacity, String initialLocationAirportCode) {\r\n        try {\r\n            // Ensure the airport exists before adding the airplane\r\n            if (airportManager.findAirport(initialLocationAirportCode) != null) {\r\n                if (!airplanes.containsKey(id)) { // Prevent adding duplicate airplanes\r\n                    airplanes.put(id, new Airplane(id, capacity, initialLocationAirportCode));\r\n                    System.out.println(\"[INFO] Airplane \" + id + \" added at \" + initialLocationAirportCode + \".\");\r\n                } else {\r\n                    System.out.println(\"[WARN] Airplane \" + id + \" already exists. Skipping.\");\r\n                }\r\n            } else {\r\n                System.err.println(\"[ERROR] Cannot add airplane \" + id + \". Initial location \" + initialLocationAirportCode + \" is not a valid airport.\");\r\n            }\r\n        } catch (ListException e) { // Catch ListException from findAirport\r\n            System.err.println(\"[ERROR] Problem finding airport for new airplane: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    // 2. Generación de vuelos\r\n    private void generateRandomFlightBasedOnRules() {\r\n        // Handle all exceptions internally to keep the scheduler running\r\n        try {\r\n            System.out.println(\"\\n--- Generating new flight request ---\");\r\n\r\n            // Find the 5 airports with the most routes\r\n            DoublyLinkedList allAirportsList = airportManager.getAllAirports();\r\n            if (allAirportsList.isEmpty()) {\r\n                System.out.println(\"[WARN] No airports available to generate flights. Cannot generate flight.\");\r\n                return;\r\n            }\r\n\r\n            // Convert DoublyLinkedList to ArrayList for easier sorting\r\n            List<Airport> topAirports = new ArrayList<>();\r\n            for (int i = 0; i < allAirportsList.size(); i++) {\r\n                Airport airport = (Airport) allAirportsList.get(i); // get() might throw ListException from DoublyLinkedList\r\n                if (airport.getStatus() == Airport.AirportStatus.ACTIVE) { // Only consider active airports\r\n                    topAirports.add(airport);\r\n                }\r\n            }\r\n\r\n            if (topAirports.isEmpty()) {\r\n                System.out.println(\"[WARN] No active airports to generate flights. Cannot generate flight.\");\r\n                return;\r\n            }\r\n\r\n            // Sort by outgoing route count (descending)\r\n            // CORRECTED: Use airport.getCode() to get the airport code for the graph lookup\r\n            Collections.sort(topAirports, Comparator.comparingInt(airport -> routeManager.getGraph().getOutgoingRouteCount(airport.getCode())).reversed());\r\n\r\n\r\n            List<Airport> selectedOrigins = new ArrayList<>();\r\n            // Select up to 5 of the top airports (or fewer if fewer than 5 active airports)\r\n            for (int i = 0; i < Math.min(5, topAirports.size()); i++) {\r\n                selectedOrigins.add(topAirports.get(i));\r\n            }\r\n\r\n            if (selectedOrigins.isEmpty()) {\r\n                System.out.println(\"[WARN] Could not select suitable origin airports. Cannot generate flight.\");\r\n                return;\r\n            }\r\n\r\n            // Pick a random origin from the selected top airports\r\n            Airport originAirport = selectedOrigins.get(random.nextInt(selectedOrigins.size()));\r\n            String originCode = originAirport.getCode();\r\n\r\n            // Find a random destination that is not the origin and has a route\r\n            List<String> allAirportCodes = routeManager.getGraph().getAllAirportCodes();\r\n            String destinationCode = null;\r\n            int attempts = 0; // Safeguard against infinite loops if no valid routes\r\n            final int MAX_ATTEMPTS = 50; // Max attempts to find a valid destination\r\n\r\n            while (destinationCode == null || destinationCode.equals(originCode) ||\r\n                    routeManager.calculateShortestRoute(originCode, destinationCode) == Integer.MAX_VALUE) {\r\n\r\n                if (allAirportCodes.isEmpty()) { // No airports at all to pick destination from\r\n                    System.out.println(\"[WARN] No destination airports available. Cannot generate flight.\");\r\n                    return;\r\n                }\r\n\r\n                if (attempts >= MAX_ATTEMPTS) {\r\n                    System.out.println(\"[WARN] Failed to find a valid destination with a route from \" + originCode + \" after \" + MAX_ATTEMPTS + \" attempts. Cannot generate flight.\");\r\n                    return;\r\n                }\r\n\r\n                destinationCode = allAirportCodes.get(random.nextInt(allAirportCodes.size()));\r\n\r\n                attempts++;\r\n            }\r\n\r\n            // Select random airplane (prefer one at the origin airport if available)\r\n            Airplane selectedAirplane = null;\r\n            // Try to find an airplane currently at the origin airport\r\n            for (Airplane airplane : airplanes.values()) {\r\n                if (airplane.getCurrentLocationAirportCode().equals(originCode)) {\r\n                    selectedAirplane = airplane;\r\n                    break;\r\n                }\r\n            }\r\n            // If no airplane at origin, pick any available\r\n            if (selectedAirplane == null) {\r\n                List<Airplane> availableAirplanes = new ArrayList<>(airplanes.values());\r\n                if (availableAirplanes.isEmpty()) {\r\n                    System.out.println(\"[WARN] No airplanes available to generate flights. Cannot generate flight.\");\r\n                    return;\r\n                }\r\n                selectedAirplane = availableAirplanes.get(random.nextInt(availableAirplanes.size()));\r\n            }\r\n\r\n            // Generate random capacity for the flight\r\n            int capacity = selectedAirplane.getCapacity(); // Use airplane's capacity as max\r\n            if (capacity < 100) capacity = 100; // Minimum capacity for a flight\r\n            capacity = random.nextInt(capacity / 2) + capacity / 2; // Make it 50%-100% of airplane's capacity\r\n\r\n            String flightNumber = \"FL\" + (random.nextInt(900) + 100); // e.g., FL123\r\n            LocalDateTime departureTime = LocalDateTime.now().plusHours(random.nextInt(12) + 1); // 1-12 hours from now\r\n\r\n            // Create the flight\r\n            flightScheduleManager.createFlight(flightNumber, originCode, destinationCode, departureTime, capacity);\r\n\r\n            // Simulate some passengers buying tickets\r\n            int passengersBuyingTickets = random.nextInt(capacity / 2) + 1; // 1 to half capacity of the flight\r\n            System.out.println(\"[INFO] Attempting to process tickets for \" + passengersBuyingTickets + \" passengers.\");\r\n            for (int i = 0; i < passengersBuyingTickets; i++) {\r\n                // Pick a random passenger (for simplicity, from existing ones)\r\n                String passengerId = \"100\" + (random.nextInt(5) + 1); // Assuming 1001-1005 exist\r\n                Passenger p = passengerManager.searchPassenger(passengerId);\r\n                if (p != null) {\r\n                    flightScheduleManager.processTicketPurchase(p, originCode, destinationCode);\r\n                } else {\r\n                    System.err.println(\"[ERROR] Passenger \" + passengerId + \" not found for ticket purchase simulation.\");\r\n                }\r\n            }\r\n\r\n            // Simulate the flight with the selected airplane\r\n            flightScheduleManager.simulateFlight(flightNumber, airportManager, passengerManager, selectedAirplane);\r\n\r\n        } catch (ListException | StackException e) {\r\n            System.err.println(\"[ERROR] Error during random flight generation: \" + e.getMessage());\r\n        } catch (Exception e) {\r\n            // Catch any other unexpected exceptions to prevent scheduler from stopping\r\n            System.err.println(\"[FATAL ERROR] An unexpected error occurred during flight generation: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Start and stop simulation\r\n    public void startSimulation(long flightGenerationIntervalSeconds, long simulationDurationSeconds) {\r\n        System.out.println(\"\\n--- Starting Flight Simulation ---\");\r\n        System.out.println(\"Flights will be generated every \" + flightGenerationIntervalSeconds + \" seconds.\");\r\n        System.out.println(\"Simulation will run for \" + simulationDurationSeconds + \" seconds.\");\r\n\r\n        // Schedule flight generation\r\n        scheduler.scheduleAtFixedRate(this::generateRandomFlightBasedOnRules, 1, flightGenerationIntervalSeconds, TimeUnit.SECONDS);\r\n\r\n        // Schedule the stop of the simulation\r\n        scheduler.schedule(() -> {\r\n            try {\r\n                stopSimulation();\r\n            } catch (ListException e) {\r\n                System.err.println(\"[ERROR] Error stopping simulation: \" + e.getMessage());\r\n            }\r\n        }, simulationDurationSeconds, TimeUnit.SECONDS);\r\n    }\r\n\r\n    public void stopSimulation() throws ListException {\r\n        System.out.println(\"\\n--- Stopping Flight Simulation ---\");\r\n        scheduler.shutdown();\r\n        try {\r\n            if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) { // Give it a bit more time to finish tasks\r\n                scheduler.shutdownNow(); // Force shutdown if tasks don't complete\r\n                System.out.println(\"[WARN] Forced shutdown of scheduler. Some tasks might not have completed.\");\r\n            }\r\n        } catch (InterruptedException e) {\r\n            scheduler.shutdownNow();\r\n            Thread.currentThread().interrupt(); // Restore the interrupted status\r\n            System.err.println(\"[ERROR] Simulation shutdown was interrupted.\");\r\n        }\r\n        System.out.println(\"\\n--- Flight Simulation Stopped ---\");\r\n\r\n        // Print all airplane histories at the end\r\n        System.out.println(\"\\n--- Airplane Flight Histories ---\");\r\n        if (airplanes.isEmpty()) {\r\n            System.out.println(\"No airplanes in the system.\");\r\n        } else {\r\n            airplanes.values().forEach(Airplane::printFlightHistory);\r\n        }\r\n        System.out.println(\"---------------------------------\");\r\n\r\n\r\n        // Print passenger histories (optional)\r\n        System.out.println(\"\\n--- Passenger Flight Histories ---\");\r\n        if (passengerManager.getPassengerCount() == 0) {\r\n            System.out.println(\"No passengers registered or with flight history.\");\r\n        } else {\r\n            passengerManager.showFlightHistory(\"1001\");\r\n            passengerManager.showFlightHistory(\"1002\");\r\n            passengerManager.showFlightHistory(\"1003\");\r\n        }\r\n        System.out.println(\"----------------------------------\");\r\n\r\n\r\n        // List final states of airports and flights\r\n        System.out.println(\"\\n--- Final Airport Status ---\");\r\n        airportManager.listAirports(true, true);\r\n        System.out.println(\"\\n--- Final Flight Schedule ---\");\r\n        flightScheduleManager.listAllFlights();\r\n        System.out.println(\"-----------------------------\");\r\n    }\r\n\r\n    // Main method to run the simulation\r\n    public static void main(String[] args) {\r\n        try {\r\n            FlightSimulator simulator = new FlightSimulator();\r\n            simulator.startSimulation(10, 60);\r\n\r\n        } catch (ListException e) {\r\n            System.err.println(\"[FATAL ERROR] Failed to initialize Flight Simulator: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ucr/proyectoalgoritmos/Domain/flight/FlightSimulator.java b/src/main/java/ucr/proyectoalgoritmos/Domain/flight/FlightSimulator.java
--- a/src/main/java/ucr/proyectoalgoritmos/Domain/flight/FlightSimulator.java	(revision 803fb6e697924cc9425aa440f55af6fa599eabbd)
+++ b/src/main/java/ucr/proyectoalgoritmos/Domain/flight/FlightSimulator.java	(date 1749448888321)
@@ -242,7 +242,7 @@
 
             // Sort by outgoing route count (descending)
             // CORRECTED: Use airport.getCode() to get the airport code for the graph lookup
-            Collections.sort(topAirports, Comparator.comparingInt(airport -> routeManager.getGraph().getOutgoingRouteCount(airport.getCode())).reversed());
+            //Collections.sort(topAirports, Comparator.comparingInt(airport -> routeManager.getGraph().getOutgoingRouteCount(airport.getCode())).reversed());
 
 
             List<Airport> selectedOrigins = new ArrayList<>();
